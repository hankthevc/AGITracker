# ========================================
# Multi-stage build for Celery workers
# ========================================

# Stage 1: Builder
FROM python:3.11-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    wget \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy dependency files
COPY services/etl/pyproject.toml services/etl/setup.py ./

# Install dependencies to a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -e .

# Install Playwright browsers (in builder to cache)
RUN playwright install chromium --with-deps

# Stage 2: Runtime
FROM python:3.11-slim

# Install runtime dependencies for Playwright
RUN apt-get update && apt-get install -y \
    libpq5 \
    wget \
    gnupg \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for Celery
RUN groupadd -r celery && \
    useradd -r -g celery -u 1001 celery && \
    mkdir -p /app && \
    chown -R celery:celery /app

WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy Playwright browsers from builder
COPY --from=builder /root/.cache/ms-playwright /home/celery/.cache/ms-playwright
RUN chown -R celery:celery /home/celery/.cache

# Copy application code
COPY --chown=celery:celery services/etl/app ./app
COPY --chown=celery:celery packages/scoring/python ./packages/scoring/python
COPY --chown=celery:celery packages/shared/config ./packages/shared/config

# Security: Run as non-root user
USER celery

# Health check for worker
HEALTHCHECK --interval=60s --timeout=10s --start-period=10s --retries=3 \
    CMD celery -A app.celery_app inspect ping || exit 1

# Default command (override in docker-compose)
CMD ["celery", "-A", "app.celery_app", "worker", "--loglevel=info"]

