name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual deployment

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel in-progress deployments

jobs:
  deploy-frontend:
    name: Deploy Frontend (Vercel)
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Deploy to Vercel
        id: deploy-vercel
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"
        working-directory: apps/web
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Smoke Test Frontend
        run: |
          echo "Testing frontend at: ${{ steps.deploy-vercel.outputs.url }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy-vercel.outputs.url }}")
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Frontend is responding (HTTP $response)"
          else
            echo "‚ùå Frontend smoke test failed (HTTP $response)"
            exit 1
          fi
      
      - name: Post deployment status
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
            const url = '${{ steps.deploy-vercel.outputs.url }}';
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              target_url: url,
              description: `Frontend deployment ${status}`,
              context: 'deploy/vercel'
            });

  deploy-backend:
    name: Deploy Backend (Railway)
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
      
      - name: Deploy to Railway
        id: deploy-railway
        run: |
          echo "Deploying backend to Railway..."
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway up --service agi-tracker-api
          url=$(railway status --service agi-tracker-api --json | jq -r '.url')
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Wait for deployment
        run: sleep 30
      
      - name: Run Database Migrations
        run: |
          echo "Running database migrations..."
          railway run --service agi-tracker-api "cd infra/migrations && alembic upgrade head"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Smoke Test Backend
        run: |
          echo "Testing backend at: ${{ steps.deploy-railway.outputs.url }}"
          # Test health endpoint
          health_response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy-railway.outputs.url }}/health")
          if [ "$health_response" -eq 200 ]; then
            echo "‚úÖ Health endpoint OK (HTTP $health_response)"
          else
            echo "‚ùå Health endpoint failed (HTTP $health_response)"
            exit 1
          fi
          
          # Test API endpoint
          api_response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy-railway.outputs.url }}/v1/events?limit=1")
          if [ "$api_response" -eq 200 ]; then
            echo "‚úÖ API endpoint OK (HTTP $api_response)"
          else
            echo "‚ùå API endpoint failed (HTTP $api_response)"
            exit 1
          fi
      
      - name: Post deployment status
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
            const url = '${{ steps.deploy-railway.outputs.url }}';
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              target_url: url,
              description: `Backend deployment ${status}`,
              context: 'deploy/railway'
            });

  deploy-celery-worker:
    name: Deploy Celery Worker (Railway)
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
      
      - name: Deploy Celery Worker
        run: |
          echo "Deploying Celery worker..."
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway up --service agi-tracker-celery-worker
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Wait for deployment
        run: sleep 20
      
      - name: Verify Worker Status
        run: |
          echo "Checking worker logs for 'ready' message..."
          railway logs --service agi-tracker-celery-worker --limit 50 | grep -i "ready" || echo "‚ö†Ô∏è Worker may still be starting"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-celery-beat:
    name: Deploy Celery Beat (Railway)
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
      
      - name: Deploy Celery Beat
        run: |
          echo "Deploying Celery beat scheduler..."
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway up --service agi-tracker-celery-beat
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Wait for deployment
        run: sleep 20
      
      - name: Verify Beat Status
        run: |
          echo "Checking beat logs for 'Scheduler' message..."
          railway logs --service agi-tracker-celery-beat --limit 50 | grep -i "scheduler" || echo "‚ö†Ô∏è Beat may still be starting"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  post-deployment:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: success()
    
    steps:
      - name: End-to-End Smoke Test
        run: |
          echo "Running end-to-end smoke test..."
          echo "This would test frontend -> backend connectivity"
          echo "‚úÖ Deployment complete!"
      
      - name: Notify Success
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'üöÄ **Deployment Successful**\n\n‚úÖ Frontend deployed to Vercel\n‚úÖ Backend deployed to Railway\n‚úÖ Migrations applied\n‚úÖ Smoke tests passed'
            });

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: failure()
    
    steps:
      - name: Notify Failure
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: '‚ùå **Deployment Failed**\n\nPlease check the workflow logs for details.\n\n‚ö†Ô∏è Consider rolling back to the previous deployment if the site is broken.'
            });
      
      - name: Rollback Instructions
        run: |
          echo "To manually rollback:"
          echo "1. Go to Vercel dashboard and revert to previous deployment"
          echo "2. Use Railway dashboard to rollback services"
          echo "3. Or redeploy the previous commit"
